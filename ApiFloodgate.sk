# The skript depends on plugins:
# Skript
# Skript-Reflect
# BEMenuAPI
# Floodgate
# and you don't need Floodgate-Skript any more

import:
    org.bukkit.Bukkit
    org.bukkit.entity.Player

    org.geysermc.floodgate.api.FloodgateApi
    org.geysermc.cumulus.SimpleForm
    org.geysermc.cumulus.ModalForm
    org.geysermc.cumulus.CustomForm
    org.geysermc.cumulus.util.FormBuilder
    org.geysermc.cumulus.util.FormImage
    org.geysermc.cumulus.util.FormType
    org.geysermc.cumulus.util.ComponentType
    org.geysermc.cumulus.util.FormImage$Type
    
    me.zimzaza4.LForm
    me.zimzaza4.SimpleFormClickEvent
    me.zimzaza4.ModalFormClickEvent
    me.zimzaza4.CustomFormClickEvent
    

on load:
    delete {floodgateApiCache::*}
    set {_floodgate_skript} to Bukkit.getPluginManager().getPlugin("Floodgate-Skript")
    if {_floodgate_skript} is set:
        send "&cYou don't need Floodgate-Skript any more" to console
        
    
on unload:
    delete {floodgateApiCache::*}
    
function saveFloodgatePlayerInfo(p: player, type: string, info: string):
    set {floodgateApiCache::%{_p}'s uuid%::%{_type}%} to {_info}

on join with priority lowest:
    set {_p} to player
    
    set {_fp} to FloodgateApi.getInstance().getPlayer({_p}.getUniqueId())
    if {_fp} is set:
        set {_locate} to {_fp}.getLanguageCode()
        set {_device} to {_fp}.getDeviceOs().toString()
        set {_version} to {_fp}.getVersion()
        set {_ui} to {_fp}.getUiProfile().toString()
        set {floodgateApiCache::%{_p}'s uuid%::bedrock} to true
    else:
        set {_locate} to "Java"
        set {_version} to "Java"
        set {_device} to "Java"
        set {_ui} to "JAVA"
        
    saveFloodgatePlayerInfo({_p}, "ui", {_ui})
    saveFloodgatePlayerInfo({_p}, "locate", {_locate})
    saveFloodgatePlayerInfo({_p}, "device", {_device})
    saveFloodgatePlayerInfo({_p}, "version", {_version})
    

condition %player% (1¦is|2¦is(n't| not)) [from] floodgate:
    check:
        set {_p} to expr-1
        if mark is 1:
            if {floodgateApiCache::%{_p}'s uuid%::bedrock} is true:
                continue
        else if mark is 2:
            if {floodgateApiCache::%{_p}'s uuid%::bedrock} isn't true:
                continue
                
                
expression [the] [bedrock] (locale|language) of [the] [floodgate] %player%:
    return type: string
    get:
        set {_p} to expr-1
        return {floodgateApiCache::%uuid of {_p}%::locate}
        
expression [the] [bedrock] (platform|device) of [the] [floodgate] %player%:
    return type: string
    get: 
        set {_p} to expr-1
        return {floodgateApiCache::%uuid of {_p}%::device}
        
expression [the] [bedrock] version of [the] [floodgate] %player%:
    return type: string
    get:
        set {_p} to expr-1
        return {floodgateApiCache::%uuid of {_p}%::version}
        
expression [the] [bedrock] ui [profile] of [the] [floodgate] %player%:
    return type: string
    get:
        set {_p} to expr-1
        return {floodgateApiCache::%uuid of {_p}%::ui}
        
 
on quit:
    delete {floodgateApiCache::%player's uuid%::*}
        


on CustomFormClickEvent:
    set {_events::player} to event.getPlayer()
    set {_extras::form-id} to event.getFormID()
    set {_extras::response} to event.getResponse()
    set {_extras::form-title} to event.getTitle()
   
    call custom event "submit custom form" with {_events::*} data {_extras::*}

on ModalFormClickEvent: 
    set {_events::player} to event.getPlayer()
    set {_extras::form-id} to event.getFormId()
    set {_extras::response} to event.getResponse()
    set {_extras::button-id} to event.getButtonID()
    set {_extras::button-name} to event.getButtonName()

    call custom event "click button of form" with {_events::*} data {_extras::*}

on SimpleFormClickEvent:  
    set {_events::player} to event.getPlayer()
    set {_extras::form-id} to event.getFormId()
    set {_extras::response} to event.getResponse()
    set {_extras::button-id} to event.getButtonID()
    set {_extras::button-name} to event.getButtonName()

    call custom event "click button of form" with {_events::*} data {_extras::*}


expression button id of %object%:
    return type: number
    get:
        return expr-1.getButtonID()


expression form id of [response ]%object%:
    return type: string
    get:
        if expr-1.getFormId() is not null:
            set {_id} to expr-1.getFormId()
        else if expr-1.getFormID() is not null:
            set {_id} to expr-1.getFormID()
        return {_id}


custom event "submit custom form":
    pattern: submit custom form
    event-values: player


custom event "click button of form":
    pattern: click form button
    event-values: player


expression [the] simple form with title %string%:
    return type: object
    get: 
        set {_F} to SimpleForm.builder().title(expr-1)
        return {_F}
        
expression [the] custom form with title %string%:
    return type: object
    get: 
        set {_F} to CustomForm.builder().title(expr-1)
        return {_F}
        

expression [the] modal form with title %string% and button[s] %string% %string%:
    return type: object
    get: 
        set {_F} to ModalForm.builder().title(expr-1)    
        {_F}.button1(expr-2).button2(expr-3)
        return {_F}


expression [the] dropdown [component] display[s] %string% with [the] option[s] %strings%:
    return type: strings
    get: 
        set {_a::*} to expr-2
        set {_s::1} to "dropdown"
        set {_s::2} to expr-1
        set {_s::3} to join {_a::*} by "[;;]"
        return {_s::*}


expression [the] toggle [component] display[s] %string%[ with( | state )%-boolean%]:
    return type: strings
    get:
        set {_s::1} to "toggle"
        set {_s::2} to expr-1
        if expr-2 is set:
            set {_s::3} to "%expr-2%"
        return {_s::*}


expression [the] input [component] display[s] %string% with placeholder %string% and (text|default text) %string%:
    return type: strings
    get:
        set {_s::1} to "input"
        set {_s::2} to expr-1
        set {_s::3} to expr-2  
        set {_s::4} to expr-3
        return {_s::*}

expression [the] slider component display[s] %string% with min[imum][ value] %number%(,| ,|, )max[imum][ value] %number%(,| ,|, )step %number%(,| ,|, )default [value ]%number%:
    return type: strings
    get:
        set {_s::1} to "slider"
        set {_s::2} to expr-1
        set {_s::3} to "%expr-2%"
        set {_s::4} to "%expr-3%"
        set {_s::5} to "%expr-4%"
        set {_s::6} to "%expr-5%"
        return {_s::*}
        
effect send[-]form %object% with id %string% to %player%:
    trigger:
        set {_F} to expr-1.build()
        if {_F}.getType() is FormType.SIMPLE_FORM:
            set {_F} to LForm.SimpleListener(expr-3, expr-1, expr-2)
        else if {_F}.getType() is FormType.MODAL_FORM:
            set {_F} to LForm.ModalListener(expr-3, expr-1, expr-2)
        else if {_F}.getType() is FormType.CUSTOM_FORM:
            set {_F} to LForm.CustomListener(expr-3, expr-1, expr-2)

        set {_fp} to FloodgateApi.getInstance().getPlayer(expr-3.getUniqueId())
        {_fp}.sendForm({_F})


expression input component[ with] id %number% of [response ]%object%:
    return type: string
    get:
        set {_r} to expr-2.getInput(expr-1)
        return {_r}


expression toggle component[ with] id %number% of [response ]%object%:
    return type: boolean
    get:
        set {_r} to expr-2.getToggle(expr-1)
        return {_r}


expression slider component[ with] id %number% of [response ]%object%:
    return type: number
    get:
        set {_r} to expr-2.getSlider(expr-1)
        return {_r}
    

expression step slide[r] component[ with] id %number% of [response ]%object%:
    return type: number
    get:
        set {_r} to expr-2.getStepSlide(expr-1)
        return {_r}


expression dropdown component[ with] id %number% of [response ]%object%:
    return type: number
    get:
        set {_r} to expr-2.getDropdown(expr-1)
        return {_r}


expression form title of [response ]%object%:
    return type: string
    get:
        set {_r} to expr-1.getTitle()
        return {_r}


expression component[ with] id %number% of [response ]%object%:
    return type: string
    get:
        set {_t} to expr-2.getComponentTypes().toString().replaceAll("[\[\]]", "").split(",")
        set {_t} to {_t}[expr-1]
        if {_t} is "SLIDER":

            set {_r} to expr-2.getSlider(expr-1)
        
        else if {_t} is "STEP_SLIDER":

            set {_r} to expr-2.getStepSlide(expr-1)

        else if {t} is "TOGGLE":
            
            set {_r} to expr-2.getToggle(expr-1)
            
        else if {_t} is "DROPDOWN":

            set {_r} to expr-2.getDropdown(expr-1)
        
        else if {_t} is "INPUT":

            set {_r} to expr-2.getInput(expr-1)
                
        return "%{_r}%"


effect add %strings% to [form] %object%:
    trigger:
        set {_a::*} to expr-1
        if {_a::1} is "dropdown":
            set {_opt::*} to split {_a::3} by "[;;]"
            expr-2.dropdown({_a::2}, [{_opt::*}])
        else if {_a::1} is "input":
            expr-2.input({_a::2}, {_a::3}, {_a::4})
        else if {_a::1} is "toggle":
            if {_a::3} is set:
                set {_boolean} to {_a::3} parsed as boolean
            else:
                set {_boolean} to false
            expr-2.toggle({_a::2}, {_boolean})
        else if {_a::1} is "slider":
            set {_min} to {_a::3} parsed as number
            set {_max} to {_a::4} parsed as number
            set {_step} to {_a::5} parsed as number
            set {_default} to {_a::6} parsed as number
            expr-2.slider({_a::2}, {_min}, {_max}, {_step}, {_default})
        else:
            set {_s::*} to split {_a::1} by "[;;]"
            if {_s::1} is "url":
                expr-2.button({_s::2}, Type.URL, {_s::3})
            else if {_s::1} is "path":
                expr-2.button({_s::2}, Type.PATH, {_s::3})
            else if {_s::1} is "none":
                expr-2.button({_s::2})
            else if {_s::1} is "content":
                expr-2.content({_s::2})



expression [the] [form] content %string%:
    return type: string
    get:
        set {_b} to "content[;;]%expr-1%"
        return {_b}
expression [the] button display %string%[ with (path icon %-string%|url icon %-string%)]:
    return type: string
    get:
        if expr-2 is set:
            set {_b} to "path[;;]%expr-1%[;;]%expr-2%"
        else if expr-3 is set:
            set {_b} to "url[;;]%expr-1%[;;]%expr-2%"
        else:
            set {_b} to "none[;;]%expr-1%"
        return {_b}
        

